import logging
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# üîí –¢–í–û–ò –î–ê–ù–ù–´–ï
API_TOKEN = "7689697850:AAFeDtgekHM6bsOT7B0A1rdsaTRCcp59VqY"
ADMIN_TG_ID = "5520224616"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

user_balances = {}
last_daily_claim = {}

# üé¥ –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
def draw_card():
    return random.choice(['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'])

def card_value(card):
    if card in ['J', 'Q', 'K']:
        return 10
    elif card == 'A':
        return 11
    return int(card)

def total(hand):
    result = sum(card_value(c) for c in hand)
    aces = hand.count('A')
    while result > 21 and aces:
        result -= 10
        aces -= 1
    return result

# üü¢ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    user_balances.setdefault(user_id, 100)

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play"))
    kb.add(InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞", callback_data="daily"))
    kb.add(InlineKeyboardButton("üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", callback_data="donate"))

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Blackjack-–±–æ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

# üïπ –ö–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: True)
async def handle(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if data == "daily":
        today = datetime.utcnow().date()
        if last_daily_claim.get(user_id) == today:
            await callback_query.message.edit_text("–¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è!")
        else:
            user_balances[user_id] = user_balances.get(user_id, 100) + 10
            last_daily_claim[user_id] = today
            await callback_query.message.edit_text(f"–ü–æ–ª—É—á–µ–Ω–æ +10 –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}")
        return

    if data == "play":
        if user_balances.get(user_id, 100) < 10:
            await callback_query.message.edit_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ú–∏–Ω–∏–º—É–º 10.")
            return

        player = [draw_card(), draw_card()]
        dealer = [draw_card()]
        text = f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {player} (—Å—É–º–º–∞: {total(player)})\n–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {dealer}"

        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–í–∑—è—Ç—å", callback_data=f"hit|{','.join(player)}|{dealer[0]}"))
        kb.add(InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç", callback_data=f"stand|{','.join(player)}|{dealer[0]}"))

        await callback_query.message.edit_text(text, reply_markup=kb)

    elif data.startswith("hit") or data.startswith("stand"):
        parts = data.split("|")
        action = parts[0]
        player = parts[1].split(",")
        dealer = [parts[2]]

        if action == "hit":
            player.append(draw_card())
            if total(player) > 21:
                user_balances[user_id] -= 10
                await callback_query.message.edit_text(
                    f"–ü—Ä–æ–∏–≥—Ä—ã—à! –¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {player} ({total(player)}). –ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}"
                )
                return
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("–í–∑—è—Ç—å", callback_data=f"hit|{','.join(player)}|{dealer[0]}"))
            kb.add(InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç", callback_data=f"stand|{','.join(player)}|{dealer[0]}"))
            await callback_query.message.edit_text(
                f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {player} ({total(player)})\n–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {dealer}", reply_markup=kb
            )

        elif action == "stand":
            while total(dealer) < 17:
                dealer.append(draw_card())

            text = f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {player} ({total(player)})\n–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {dealer} ({total(dealer)})\n"
            if total(dealer) > 21 or total(player) > total(dealer):
                user_balances[user_id] += 10
                text += "–¢—ã –≤—ã–∏–≥—Ä–∞–ª! +10 –º–æ–Ω–µ—Ç"
            elif total(player) < total(dealer):
                user_balances[user_id] -= 10
                text += "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. -10 –º–æ–Ω–µ—Ç"
            else:
                text += "–ù–∏—á—å—è."
            text += f"\n–ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}"
            await callback_query.message.edit_text(text)

    elif data == "donate":
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("TON –ø–µ—Ä–µ–≤–æ–¥", url=f"https://t.me/crypto?start=send-{ADMIN_TG_ID}"))
        await callback_query.message.edit_text("–ü–æ–¥–¥–µ—Ä–∂–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:", reply_markup=kb)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
